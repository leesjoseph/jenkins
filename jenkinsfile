pipeline {
    agent any
    tools {
        maven 'Maven-3.9.9'
        jdk 'jdk-17'
    }

    environment {
        registryCredential = 'ecr:ap-northeast-2:awscred'
        imageName = '851725317659.dkr.ecr.ap-northeast-2.amazonaws.com/vprofileappimg'
        vprofileRegistry = '851725317659.dkr.ecr.ap-northeast-2.amazonaws.com'
    }

    stages {
        stage('Fetch the code') {
            steps {
                git branch: 'docker', url: 'https://github.com/hkhcoder/vprofile-project.git'
            }
        }
        
        stage('Build the code') {
            steps {
                sh 'mvn -DskipTests install'
            }
        }

        stage('Run the tests') {
            steps {
                sh 'mvn test'
            }
        }

        stage('SonarQube Checkstyle') {
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }

        stage('SonarQube Code Analysis') {
            environment {
                scannerHome = tool 'Sonar-7.0'
            }
            steps {
                withSonarQubeEnv('sonar') {
                    sh '''
                    ${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                    -Dsonar.projectName="vprofile" \
                    -Dsonar.projectVersion=1.0 \
                    -Dsonar.sources=src/ \
                    -Dsonar.java.binaries=target/classes
                    '''
                }
            }
        }

        stage('SonarQube Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    dockerImage = docker.build(imageName + ":$BUILD_NUMBER", "./Docker-files/app/multistage/")
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
               docker.withRegistry(vprofileRegistry, registryCredential) {
                    dockerImage.push("$BUILD_NUMBER")
                    dockerImage.push("latest")
               }
                }
            }
        }

    }
}